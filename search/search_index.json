{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is this? http-response is a free service that makes it possible to create HTTP responses \"on the fly\" either by using a GET request and defining the response through query string parameters, or you can use a POST request and define the response through a JSON payload. It also makes it possible to generate dummy data and to generate lists of data by repeating items.","title":"What is this?"},{"location":"#what-is-this","text":"http-response is a free service that makes it possible to create HTTP responses \"on the fly\" either by using a GET request and defining the response through query string parameters, or you can use a POST request and define the response through a JSON payload. It also makes it possible to generate dummy data and to generate lists of data by repeating items.","title":"What is this?"},{"location":"dummy-data/","text":"Dummy data When creating a mock API response, being able to generate dummy data is very useful. This project uses FakerPHP/Faker under the hood and makes it available to use in the response body. Generating values Faker uses what it calls \"formatters\" to generate values, it is basically a function you call to generate a fake value. Some example formatters: name , address , email etc. You can see all available formatters that faker provides here: https://fakerphp.github.io/formatters/ ( Make sure to expand \"Formatters\" to show all ) To generate a fake value, use the following syntax in the response body: {{ insertFakerFormatter('arg1', 'arg2') }} where insertFakerFormatter would be replaced by the by the faker formatter you would like to use. Some of the formatters accepts arguments, which can be provided as shown above. Examples Here's an example GET request generating a JSON response with some fake data: http://http-response.com/json?body={\"name\":\"{{ name('female') }}\",\"address\":\"{{ address() }}\",\"favorite_color\":\"{{ randomElement(['green', 'red', 'black', 'blue']) }}\"} Here's an example GET request generating an HTML response with some fake data: http://http-response.com/?headers[content-type]=text/html&body=<h1>Hello, my name is {{ name() }}</h1><p>I live on {{ streetName() }} in {{ city() }} Locale Faker makes it possible to change the locale for the generated data. You can set the locale by providing the parameter fake_data_locale and setting the value to the locale you'd like to use. Example GET request generating a Swedish address: http://http-response.com/json?body={\"address\":\"{{ address() }}\"}&fake_data_locale=sv_SE Example POST payload generating a Swedish address: { \"body\": { \"address\": \"{{ address() }}\" }, \"fake_data_locale\": \"sv_SE\" } Read more: https://fakerphp.github.io/#localization Persistent data Maybe you've noticed that the generated data changes on every request? This is the default when generating data. If you'd like to get the same data generated on subsequent requests, you can provide the parameter fake_data_persist and set the value to true. Example GET request generating the same address on every request: http://http-response.com/json?body={\"address\":\"{{ address() }}\"}&fake_data_persist=true Example POST payload generating the same address on every request: { \"body\": { \"address\": \"{{ address() }}\" }, \"fake_data_persist\": true }","title":"Dummy data"},{"location":"dummy-data/#dummy-data","text":"When creating a mock API response, being able to generate dummy data is very useful. This project uses FakerPHP/Faker under the hood and makes it available to use in the response body.","title":"Dummy data"},{"location":"dummy-data/#generating-values","text":"Faker uses what it calls \"formatters\" to generate values, it is basically a function you call to generate a fake value. Some example formatters: name , address , email etc. You can see all available formatters that faker provides here: https://fakerphp.github.io/formatters/ ( Make sure to expand \"Formatters\" to show all ) To generate a fake value, use the following syntax in the response body: {{ insertFakerFormatter('arg1', 'arg2') }} where insertFakerFormatter would be replaced by the by the faker formatter you would like to use. Some of the formatters accepts arguments, which can be provided as shown above.","title":"Generating values"},{"location":"dummy-data/#examples","text":"Here's an example GET request generating a JSON response with some fake data: http://http-response.com/json?body={\"name\":\"{{ name('female') }}\",\"address\":\"{{ address() }}\",\"favorite_color\":\"{{ randomElement(['green', 'red', 'black', 'blue']) }}\"} Here's an example GET request generating an HTML response with some fake data: http://http-response.com/?headers[content-type]=text/html&body=<h1>Hello, my name is {{ name() }}</h1><p>I live on {{ streetName() }} in {{ city() }}","title":"Examples"},{"location":"dummy-data/#locale","text":"Faker makes it possible to change the locale for the generated data. You can set the locale by providing the parameter fake_data_locale and setting the value to the locale you'd like to use. Example GET request generating a Swedish address: http://http-response.com/json?body={\"address\":\"{{ address() }}\"}&fake_data_locale=sv_SE Example POST payload generating a Swedish address: { \"body\": { \"address\": \"{{ address() }}\" }, \"fake_data_locale\": \"sv_SE\" } Read more: https://fakerphp.github.io/#localization","title":"Locale"},{"location":"dummy-data/#persistent-data","text":"Maybe you've noticed that the generated data changes on every request? This is the default when generating data. If you'd like to get the same data generated on subsequent requests, you can provide the parameter fake_data_persist and set the value to true. Example GET request generating the same address on every request: http://http-response.com/json?body={\"address\":\"{{ address() }}\"}&fake_data_persist=true Example POST payload generating the same address on every request: { \"body\": { \"address\": \"{{ address() }}\" }, \"fake_data_persist\": true }","title":"Persistent data"},{"location":"getting-started/","text":"Getting started Base URL http://http-response.com Parameters Name Data type Default Description status_code integer 200 Sets the status code of the response headers array [] Sets the response headers body string \"\" Sets the response body Simple example In this example we will generate the following HTTP response using GET and POST requests. HTTP/1.1 200 OK Content-Type: application/json { \"hello\": \"world\" } Using a GET request http://http-response.com/?status_code=200&headers[content-type]=application/json&body={\"hello\":\"world\"} Open as link Using a POST request To create the response using a POST request, the JSON payload looks like this. { \"status_code\": 200, \"headers\": { \"content-type\": \"application/json\" }, \"body\": { \"hello\": \"world\" } } Endpoint for JSON responses As JSON responses are such a common usecase, there's an endpoint that takes care of setting the status code to 200 (overridable) and content-type header to application/json. GET http://http-response.com/json?body={\"hello\":\"world\"} POST { \"body\": { \"hello\": \"world\" } }","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#base-url","text":"http://http-response.com","title":"Base URL"},{"location":"getting-started/#parameters","text":"Name Data type Default Description status_code integer 200 Sets the status code of the response headers array [] Sets the response headers body string \"\" Sets the response body","title":"Parameters"},{"location":"getting-started/#simple-example","text":"In this example we will generate the following HTTP response using GET and POST requests. HTTP/1.1 200 OK Content-Type: application/json { \"hello\": \"world\" }","title":"Simple example"},{"location":"getting-started/#using-a-get-request","text":"http://http-response.com/?status_code=200&headers[content-type]=application/json&body={\"hello\":\"world\"} Open as link","title":"Using a GET request"},{"location":"getting-started/#using-a-post-request","text":"To create the response using a POST request, the JSON payload looks like this. { \"status_code\": 200, \"headers\": { \"content-type\": \"application/json\" }, \"body\": { \"hello\": \"world\" } }","title":"Using a POST request"},{"location":"getting-started/#endpoint-for-json-responses","text":"As JSON responses are such a common usecase, there's an endpoint that takes care of setting the status code to 200 (overridable) and content-type header to application/json. GET http://http-response.com/json?body={\"hello\":\"world\"} POST { \"body\": { \"hello\": \"world\" } }","title":"Endpoint for JSON responses"},{"location":"repeating-data/","text":"Repeating data (JSON) This functionality is only available for JSON responses http-response makes it possible to repeat list items in JSON responses. This is done by including the special property __repeat on the list items you'd like to repeat. Let me show you by using an example payload: { \"users\": [ { \"name\": \"{{ name() }}\", \"age\": \"{{ numberBetween(18, 85) }}\", \"uuid\": \"{{ uuid() }}\", \"uploads\": [ { \"filename\": \"{{ word }}.png\", \"url\": \"{{ imageUrl(640, 480, 'animals', true) }}\", \"__repeat\": 5 } ], \"__repeat\": 5 } ] } This payload will generate a list of 5 users with 5 uploads each. Each with its own fake data generated. Test it in the browser","title":"Repeating data (JSON)"},{"location":"repeating-data/#repeating-data-json","text":"This functionality is only available for JSON responses http-response makes it possible to repeat list items in JSON responses. This is done by including the special property __repeat on the list items you'd like to repeat. Let me show you by using an example payload: { \"users\": [ { \"name\": \"{{ name() }}\", \"age\": \"{{ numberBetween(18, 85) }}\", \"uuid\": \"{{ uuid() }}\", \"uploads\": [ { \"filename\": \"{{ word }}.png\", \"url\": \"{{ imageUrl(640, 480, 'animals', true) }}\", \"__repeat\": 5 } ], \"__repeat\": 5 } ] } This payload will generate a list of 5 users with 5 uploads each. Each with its own fake data generated. Test it in the browser","title":"Repeating data (JSON)"}]}